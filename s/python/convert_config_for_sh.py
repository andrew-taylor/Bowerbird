#!/usr/bin/env python

# parse the config file and output it in a format readable for shell scripts

import sys
from bowerbird.configobj import ConfigObj
from optparse import OptionParser

# location of configuration file
DEFAULT_CONFIG_FILE = '../bowerbird_config'
DEFAULT_OUTPUT_FILE = "/dev/stdout"
SH_SEPARATOR = '__'

def convertConfig(config_obj, output_file):
	# print preamble
	output_file.write('''# global variables automatically generated by
# %s
# from 
# %s
# to permit easy access for shell scripts

# Do not edit directly as it will be overwritten
''' % (__file__, config_obj.filename))

	# read station information
	for section in config_obj:
		if section != "dummy":
			# write the section comments
			section_comments = '\n'.join(config_obj.comments[section])
			if section_comments.strip():
				output_file.write(section_comments + '\n')
			else:
				output_file.write("\n# Section %s:\n" % section)

			for key in config_obj[section]:
				# write the key comments
				key_comments = '\n'.join(config_obj[section].comments[key])
				if key_comments:
					output_file.write(key_comments + '\n')
				output_file.write("%s%s%s=\"%s\"\n" % (section, SH_SEPARATOR,
						key, config_obj[section][key]))

if __name__ == '__main__':
	# parse commandline options
	parser = OptionParser()
	parser.add_option("-c", "--config", dest="config_file", 
			help="configuration file to convert", default=DEFAULT_CONFIG_FILE)
	parser.add_option("-o", "--output", dest="output_file",
			help="file to write shell variables", 
			default=DEFAULT_OUTPUT_FILE)
	(options, args) = parser.parse_args()

	# open configuration file
	config = ConfigObj(options.config_file)
	# open output file
	output = file(options.output_file, "w")

	# write converted config out
	convertConfig(config, output)
	
	# close file handles
	output.close()
	#unsupported: config.close()
