#!/bin/bash

LOGGER=/usr/bin/logger
RSYNC_ATTEMPTS=5 # default
DELETE_FILES_WHEN_FULL=1
FULL_THRESHOLD=99
FILES_TO_DELETE_WHEN_FULL=150
DPRINT=echo
# this succeeds but doesn't print anything
DPRINT=true # comment out for debug

. /etc/bowerbird/config/global_variables
PRINT=echo
test -x $LOGGER && PRINT=$LOGGER

if [ ! -d $external_storage_data_dir ]
then
	$DPRINT making external directory $external_storage_data_dir
	mkdir -p $external_storage_data_dir
fi

check_disk_space $external_storage_data_dir


# move all but todays recordings to an external device
# get today's date
today=`date +%Y_%m_%d`

# Use rsync for it's partial transfer recovery, eliminating redundant transfers, etc
# It's configured to delete files after successful transfer
# NOTE: trailing slashes are added to make sure both get treated the same (rsync is picky)
rsync_rc=-1
attempt=0
until [ $rsync_rc -eq 0 -o $attempt -ge $RSYNC_ATTEMPTS ]
do
	attempt=$(($attempt+1))
	$DPRINT "transferring files (attempt $attempt)..."
	rsync_out=`rsync -v  -rlt  --partial --remove-source-files $data_dir/ $external_storage_data_dir/`
	rsync_rc=$?

	# pass on output. If transfer failed, report it
	if [ $rsync_rc -ne 0 ]
	then
		$PRINT "Transfer failed: $rsync_out"

		# if transfer failed because disk is full, then clear some space
		# should not be needed because check_disk_space above should clear enough space
		if [ "$DELETE_FILES_WHEN_FULL" ]
		then
			df=`df $external_storage_data_dir|sed '1d;s/%.*//;s/.* //'`
			if [ "$df" -ge "$FULL_THRESHOLD" ]
			then
				find $external_storage_data_dir -name '*.wv' |
				sort -t/ -k9 -k8 -k7 -k6 -k5 -k4 -k3|
				sed ${FILES_TO_DELETE_WHEN_FULL}q \
				| xargs -r rm
			fi
		fi
	else
		$PRINT "Transfer succeeded: `echo $rsync_out | sed 's/.*\(sent [0-9]* bytes.*\)$/\1/'`"
	fi
	sleep 1
done


# clean up empty directories (rsync only removes files)
#for dir in $data_dir/*
#do
#	if [ `ls $dir|wc -l` -eq 0 ]
#	then
#		$DPRINT removing empty directory: $dir
#		rmdir $dir
#	fi
#done


# unmount external device again if we mounted it
if [ "$needs_mount" ]
then
	$DPRINT unmounting $mount_point again
	umount $mount_point

	# if configured, power down the external device (unless it was already mounted)
	if $EXTERNAL_POWER
	then
		# power down the hub, and the drive
		# TODO don't power down the hub if someone else is using it
		$DPRINT powering down the usb device #and hub
		#set_power off usbhd
		#set_power off usbhub
	fi
fi
