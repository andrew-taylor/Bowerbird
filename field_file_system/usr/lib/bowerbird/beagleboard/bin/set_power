#!/bin/bash

DEV=1

GPIO_BASE_DIR=/sys/class/gpio
GPIO_OUTPUT_DIRECTION=out
SETTLE_TIME=0.1

if [ ${DEV-0} -ne 0 ]
then
	. ../../../../../etc/bowerbird/config/global_variables
	. ../../../../../etc/bowerbird/board_configs/beagleboard.C3.0.1
	echo "WARNING: script is in development mode. Set DEV=0 to disable."
else
	. /etc/bowerbird/config/global_variables
	. /etc/bowerbird/board_configs/beagleboard.C3.0.1
	logger -t $0 "$@"
fi

USAGE="Usage: `basename $0` label value"

if [ $# -lt 2 ]
then
	echo $USAGE > /dev/stderr
	exit 1
fi

# enable extended matching (so we can match [0-9]+ in the case statement)
shopt -s extglob

while [ ! "$gpio" ]
do
	case $1 in
		# map known label aliases
		audio)	$1=microphone;;

		# deal with raw gpio numbers
		+([0-9]) )
			# make sure that's a real gpio number
			temp=gpio${1}_pin
			if [ "${!temp}" ]
			then
				gpio=$1
			else
				echo "Unmapped gpio number: $1" > /dev/stderr
				echo $USAGE
				exit 1
			fi
			;;

		# assume everything else is an alias
		*)
			temp=${1}_gpio
			if [ "${!temp}" ]
			then
				gpio=${!temp}
				# check if it's active low
				temp=${1}_activelow
				if [ ${!temp-0} -ne 0 ]
				then
					activelow=1
				fi
			else
				echo "Unknown gpio: $1" > /dev/stderr
				echo $USAGE
				exit 1
			fi
	esac
done


# map value aliases
case "$2" in
	on) value=1;;
	off) value=0;;
	+([0-9])) value=$2;;
	*)
		echo "Unknown value: $2" > /dev/stderr
		echo $USAGE
		exit 1
		;;
esac

# if device is active low, then invert value
if [ "$activelow" ]
then
	if [ $value -eq 0 ]
	then
		value=1
	else
		value=0
	fi
fi


# ensure that gpio is mapped
gpio_dir=$GPIO_BASE_DIR/gpio$gpio
if [ ! -d $gpio_dir ]
then
	echo $gpio > $GPIO_BASE_DIR/export
	sleep $SETTLE_TIME
	if [ ! -d $gpio_dir ]
	then
		echo "Couldn't create access gpio $gpio" > dev/stderr
		exit 1
	fi
fi

# ensure that gpio is set as an output
if [ `cat $gpio_dir/direction` != $GPIO_OUTPUT_DIRECTION ]
then
	echo $GPIO_OUTPUT_DIRECTION > $gpio_dir/direction
	sleep $SETTLE_TIME
	if [ `cat $gpio_dir/direction` != $GPIO_OUTPUT_DIRECTION ]
	then
		echo "Couldn't set direction for gpio $gpio to $GPIO_OUTPUT_DIRECTION" > /dev/stderr
		exit 1
	fi
fi


# write output to gpio (if necessary)
echo $value > $gpio_dir/value

# make sure that the value was set successfully
sleep $SETTLE_TIME
new_val=`cat $gpio_dir/value`
if [ $new_val != $value ]
then
	echo "Couldn't set value for gpio $gpio to $value ($new_val)" > /dev/stderr
	exit 1
fi
